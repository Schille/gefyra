name: pytest and try it yourself example

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build_operator:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to quay.io
        uses: docker/login-action@v1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_ROBOT }}
          password: ${{ secrets.QUAY_ROBOT_TOKEN }}
      #
      # Gefyra Operator
      #
      - name: Operator Image meta
        id: operator_meta
        uses: docker/metadata-action@v3
        with:
          flavor: |
            latest=false
          images: |
            quay.io/gefyra/operator
          tags: |
            type=raw,value=test-run-${{github.run_id}},enable=true
          labels: |
            quay.expires-after=24h
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: operator/
          platforms: linux/amd64
          push: true
          tags: ${{ steps.operator_meta.outputs.tags }}
          labels: ${{ steps.operator_meta.outputs.labels }}
  test:
    needs: build_operator
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install Poetry
      uses: snok/install-poetry@v1
    - name: Set Gefyra to no tracking
      shell: bash
      run: |
        mkdir -p ~/.gefyra
        cd ~/.gefyra
        touch config
        echo [telemetry] >> config
        echo track = False >> config
    - name: Pytest
      working-directory: ./client
      run: |
        poetry install
        poetry run coverage run -m pytest
    # Run the 'Try it yourself'
    - uses: AbsaOSS/k3d-action@v2
      name: Create Single Cluster
      with:
        cluster-name: "mycluster"
        args: >-
          --agents 1
          -p "31820:31820/UDP@agent:0"
    - name: Apply some workload
      run: |
        kubectl apply -f testing/workloads/hello.yaml
    - name: Run gefyra up
      working-directory: ./client
      run: |
        poetry run coverage run -a -m gefyra up --operator quay.io/gefyra/operator:test-run-${{github.run_id}}
    - name: Build a docker file
      working-directory: testing/images/
      run: |
        docker build -f Dockerfile.local . -t pyserver
    - name: Run gefyra run with faulty port flag
      working-directory: ./client
      shell: bash --noprofile --norc -o pipefail {0}
      run: |
        poetry run coverage run -a -m gefyra run -i pyserver -N mypyserver -n default --expose 8000
        test $? -eq 1
        curl localhost:8000
        test $? -ne 0
    - name: Run gefyra run with localhost port mapping
      working-directory: ./client
      run: |
        poetry run coverage run -a -m gefyra run -i pyserver -N mypyserver -n default --expose 8000:8000
        test $? -eq 0
        curl localhost:8000
        test $? -eq 0
    - name: Run gefyra bridge with invalid deployment
      working-directory: ./client
      shell: bash --noprofile --norc -o pipefail {0}
      run: |
        poetry run coverage run -a -m gefyra bridge -N mypyserver -n default --deployment hello-nginxdemo-not --port 80:8000 --container-name hello-nginx -I mypybridge
        test $? -eq 1
    - name: Run gefyra bridge with invalid container
      working-directory: ./client
      shell: bash --noprofile --norc -o pipefail {0}
      run: |
        poetry run coverage run -a -m gefyra bridge -N mypyserver -n default --deployment hello-nginxdemo --port 80:8000 --container-name hello-nginx-not -I mypybridge
        test $? -eq 1
    - name: Run gefyra bridge with deployment
      working-directory: ./client
      run: |
        poetry run coverage run -a -m gefyra bridge -N mypyserver -n default --deployment hello-nginxdemo --port 80:8000 --container-name hello-nginx -I mypybridge
    - name: Run gefyra unbridge
      working-directory: ./client
      run: |
        poetry run coverage run -a -m gefyra unbridge -A

    - name: Run gefyra bridge with pod
      working-directory: ./client
      run: |
        k=$(kubectl get pods -n default -o=go-template='{{ (index .items 0).metadata.name  }}')
        echo $k
        poetry run coverage run -a -m gefyra bridge -N mypyserver -n default --pod $k --port 80:8000 --container-name hello-nginx -I mypybridge

    - name: "Run gefyra list --bridges"
      working-directory: ./client
      run: |
        poetry run coverage run -a -m gefyra list --bridges
    - name: "Run gefyra list --containers"
      working-directory: ./client
      run: |
        poetry run coverage run -a -m gefyra list --containers
    - name: Run gefyra down
      working-directory: ./client
      run: |
        poetry run coverage run -a -m gefyra down
    - name: Show coverage report
      working-directory: ./client
      run: |
        poetry run coverage report
    - name: Upload coverage data to coveralls.io
      working-directory: ./client
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COVERALLS_FLAG_NAME: ${{ matrix.python-version }}
        COVERALLS_PARALLEL: true
      run: |
        poetry run coveralls --service=github
  coveralls:
    name: Indicate completion to coveralls.io
    # need secrets.GITHUB_TOKEN
    needs: test
    runs-on: ubuntu-latest
    container: python:3-slim
    steps:
      - name: Finished
        run: |
          pip3 install --upgrade coveralls
          coveralls --finish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}