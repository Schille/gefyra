# This workflow will build a PyInstaller binary for linux when a tag is pushed

name: Build OSX binary

env:
  PYINSTALL_DOWNLOAD: https://github.com/pyinstaller/pyinstaller/archive/refs/tags/v4.9.zip

on: [push]

jobs:
  build:
    runs-on: macos-10.15
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    - name: Setup XCode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
        virtualenvs-path: client/.venv
    - name: Install dependencies
      working-directory: client/
      run: |
        poetry install --no-interaction --no-root --no-dev
    - name: Setup PyInstaller and build bootloader
      run: |
        source client/.venv/bin/activate
        pip install wheel
        wget ${PYINSTALL_DOWNLOAD}
        unzip v4.9.zip
        cd pyinstaller-4.9/bootloader/
        python ./waf all
        cd ..
        python setup.py install
    - name: PyInstaller build
      working-directory: client/
      run: |
        source .venv/bin/activate
        pyinstaller --onefile gefyra/__main__.py  --name gefyra
        echo "APP_VERSION=`poetry version -s`" >> $GITHUB_ENV
        cp dist/gefyra ../gefyra
        cp README.md ../README.md
    - name: Codesign executable
      env:
        MACOS_DEVELOPER_HASH: ${{ secrets.MACOS_DEVELOPER_HASH }}
        MACOS_APP_HASH: ${{ secrets.MACOS_APP_HASH }}
        MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
        MACOS_KEYCHAIN_PASS: ${{ secrets.MACOS_KEYCHAIN_PASS }}
        MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
      run: |
        echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
        security create-keychain -p $MACOS_KEYCHAIN_PASS build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p $MACOS_KEYCHAIN_PASS build.keychain
        security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $MACOS_KEYCHAIN_PASS build.keychain
        echo "<?xml version="1.0" encoding="UTF-8"?>
              <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
              <plist version="1.0">
              <dict>
                      <!-- These are required for binaries built by PyInstaller -->
                      <key>com.apple.security.cs.allow-jit</key>
                      <true/>
                      <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
                      <true/>
                      <key>com.apple.security.cs.disable-library-validation</key>
                      <true/>
              </dict>
              </plist>" > entitements.plist
        echo "Now running codesign"
        /usr/bin/codesign --deep --force --options=runtime --entitlements ./entitlements.plist --sign "$MACOS_DEVELOPER_HASH $MACOS_APP_HASH" --timestamp ./gefyra
    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: gefyra-${{ env.APP_VERSION }}-darwin-amd64
        path: |
          gefyra
          LICENSE
          README.md
        retention-days: 5